// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/application/usecase/chat/chat.go
//
// Generated by this command:
//
//	mockgen -source=./internal/application/usecase/chat/chat.go -destination=./internal/application/usecase/chat/mock_chat/mock_chat.go
//

// Package mock_chat is a generated GoMock package.
package mock_chat

import (
	chat "go-grpc-domain/pb/chat"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChatUsecase is a mock of ChatUsecase interface.
type MockChatUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockChatUsecaseMockRecorder
	isgomock struct{}
}

// MockChatUsecaseMockRecorder is the mock recorder for MockChatUsecase.
type MockChatUsecaseMockRecorder struct {
	mock *MockChatUsecase
}

// NewMockChatUsecase creates a new mock instance.
func NewMockChatUsecase(ctrl *gomock.Controller) *MockChatUsecase {
	mock := &MockChatUsecase{ctrl: ctrl}
	mock.recorder = &MockChatUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatUsecase) EXPECT() *MockChatUsecaseMockRecorder {
	return m.recorder
}

// Bidirectional mocks base method.
func (m *MockChatUsecase) Bidirectional(stream grpc.BidiStreamingServer[chat.TextInput, chat.TextOutput]) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bidirectional", stream)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bidirectional indicates an expected call of Bidirectional.
func (mr *MockChatUsecaseMockRecorder) Bidirectional(stream any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bidirectional", reflect.TypeOf((*MockChatUsecase)(nil).Bidirectional), stream)
}
